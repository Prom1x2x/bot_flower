import telebot
import os
import shutil
import time
import pickle
from config import TOKEN
from telebot.types import InputMediaPhoto
from telebot.types import LabeledPrice
from flask import Flask, request, jsonify


# WEBHOOK_HOST = '5.63.159.36'
# WEBHOOK_PORT = 443  # 443, 80, 88 or 8443 (port need to be 'open')

# WEBHOOK_URL_BASE = "https://%s:%s/bot" % (WEBHOOK_HOST, WEBHOOK_PORT)
# WEBHOOK_URL_PATH = "/%s/" % (TOKEN)
# print(WEBHOOK_URL_PATH)

bufer_photo = {}
bufer_text = {}
bufer_sum = {}
bufer_name  = {}
admin = [465112900]

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
keyBoard_admin = telebot.types.ReplyKeyboardMarkup(True, one_time_keyboard = True)
#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
keyBoard_finish_add = telebot.types.ReplyKeyboardMarkup(True, one_time_keyboard = True)
#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞
keyBoard_verify = telebot.types.ReplyKeyboardMarkup(True, one_time_keyboard = True)
#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞
keyBoard_next_step = telebot.types.ReplyKeyboardMarkup(True)
#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
keyBoard_delivery = telebot.types.ReplyKeyboardMarkup(True, one_time_keyboard = True)
#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
keyBoard_pay = telebot.types.ReplyKeyboardMarkup(True, one_time_keyboard = True)


#–ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
keyBoard_admin.row('–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç')
#–ö–Ω–æ–ø–∫–∞ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
keyBoard_finish_add.row('–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ')
#–ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞/–ø–æ—Å—Ç–∞
keyBoard_verify.row('–¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ')
keyBoard_verify.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç')
#–ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞
keyBoard_next_step.row('–ü–æ—Å–º–æ—Ç–µ—Ç—å –ø–æ—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π')
keyBoard_next_step.row('–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ—Å—Ç')
keyBoard_next_step.row('–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è')
#–ö–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
keyBoard_delivery.row('–°–∞–º–æ–≤—ã–≤–æ–∑üì¶')
keyBoard_delivery.row('–î–æ—Å—Ç–∞–≤–∫–∞üöö')
#–ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã
keyBoard_pay.row('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å')
keyBoard_pay.row('–ò–∑–º–µ–Ω–∏—Ç—å')

# app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)
# bot.remove_webhook()
# time.sleep(2)
# bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH, certificate=open('/ssl/bot_sert.pem', 'r'))

#–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
def view_post(message):
    global bufer_text
    global bufer_photo

    tg_id = message.from_user.id

    count_photo = len(bufer_photo[tg_id])
    print(count_photo)
    # if count_photo == 1:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1:
    #         bot.send_photo(message.from_user.id, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb'), bufer_text[tg_id][0])
    # elif count_photo == 2:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2)]
    #         bot.send_media_group(message.from_user.id, files)
    # elif count_photo == 3:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][2]}', 'rb') as f3:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2), InputMediaPhoto(f3)]
    #         bot.send_media_group(message.from_user.id, files)
    # elif count_photo == 4:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][2]}', 'rb') as f3, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][3]}', 'rb') as f4:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2),\
    #                  InputMediaPhoto(f3), InputMediaPhoto(f4)]
    #         bot.send_media_group(message.from_user.id, files)
    # elif count_photo == 5:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][2]}', 'rb') as f3, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][3]}', 'rb') as f4,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][4]}', 'rb') as f5:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2),\
    #                  InputMediaPhoto(f3), InputMediaPhoto(f4), InputMediaPhoto(f5)]
    #         bot.send_media_group(message.from_user.id, files)
    # elif count_photo == 6:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][2]}', 'rb') as f3, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][3]}', 'rb') as f4,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][4]}', 'rb') as f5, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][5]}', 'rb') as f6:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2),\
    #                  InputMediaPhoto(f3), InputMediaPhoto(f4), InputMediaPhoto(f5),\
    #                  InputMediaPhoto(f6)]
    #         bot.send_media_group(message.from_user.id, files)
    # elif count_photo == 7:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][2]}', 'rb') as f3, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][3]}', 'rb') as f4,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][4]}', 'rb') as f5, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][5]}', 'rb') as f6,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][6]}', 'rb') as f7:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[0]}'),InputMediaPhoto(f2),\
    #                  InputMediaPhoto(f3), InputMediaPhoto(f4), InputMediaPhoto(f5),\
    #                  InputMediaPhoto(f6), InputMediaPhoto(f7)]
    #         bot.send_media_group(message.from_user.id, files)
    # elif count_photo == 8:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][2]}', 'rb') as f3, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][3]}', 'rb') as f4,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][4]}', 'rb') as f5, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][5]}', 'rb') as f6,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][6]}', 'rb') as f7, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][7]}', 'rb') as f8:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2),\
    #                  InputMediaPhoto(f3), InputMediaPhoto(f4), InputMediaPhoto(f5),\
    #                  InputMediaPhoto(f6), InputMediaPhoto(f7), InputMediaPhoto(f8)]
    #         bot.send_media_group(message.from_user.id, files)
    # elif count_photo == 9:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][2]}', 'rb') as f3, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][3]}', 'rb') as f4,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][4]}', 'rb') as f5, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][5]}', 'rb') as f6,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][6]}', 'rb') as f7, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][7]}', 'rb') as f8,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][8]}', 'rb') as f9:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2),\
    #                  InputMediaPhoto(f3), InputMediaPhoto(f4), InputMediaPhoto(f5),\
    #                  InputMediaPhoto(f6), InputMediaPhoto(f7), InputMediaPhoto(f8),\
    #                  InputMediaPhoto(f9)]
    #         bot.send_media_group(message.from_user.id, files)
    # elif count_photo == 10:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][2]}', 'rb') as f3, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][3]}', 'rb') as f4,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][4]}', 'rb') as f5, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][5]}', 'rb') as f6,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][6]}', 'rb') as f7, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][7]}', 'rb') as f8,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][8]}', 'rb') as f7, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][9]}', 'rb') as f10:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2),\
    #                  InputMediaPhoto(f3), InputMediaPhoto(f4), InputMediaPhoto(f5),\
    #                  InputMediaPhoto(f6), InputMediaPhoto(f7), InputMediaPhoto(f8),\
    #                  InputMediaPhoto(f9), InputMediaPhoto(f10)]
    #         bot.send_media_group(message.from_user.id, files)
#–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª
def send_post(message):
    global bufer_text
    global bufer_photo
    global bufer_sum
    global bufer_name
    
    tg_id = message.from_user.id
    
    with open('DB/bouquets.pickle', 'rb') as f:
        bouquets = pickle.load(f)
    
    num_post = str(len(bouquets) + 1)
    print(num_post)
    bouquets[num_post] = []
    bouquets[num_post].append(bufer_sum[tg_id][0])
    bouquets[num_post].append(bufer_name[tg_id][0])
    with open('DB/bouquets.pickle', 'wb') as f:
        pickle.dump(bouquets,f)
    print(bouquets)

    keyBoard_post = telebot.types.InlineKeyboardMarkup(True)
    key_pay = telebot.types.InlineKeyboardButton(text=f'–ö—É–ø–∏—Ç—å: {bufer_sum[tg_id][0]}—Ä—É–±', url= f'https://t.me/florico_sale_bot?start={num_post}')
    key_feedback = telebot.types.InlineKeyboardButton(text='–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', url = 'https://t.me/floricom')
    key_catalog = telebot.types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url = 'https://florico.ru/')

    keyBoard_post.add(key_pay ,key_feedback, key_catalog)

    keyBoard_sale = telebot.types.InlineKeyboardMarkup(True)
    key_sale = telebot.types.InlineKeyboardButton(text='–ü—Ä–æ–¥–∞–Ω–æ', callback_data=f'''sale_{num_post}''')

    keyBoard_sale.add(key_sale)
 
    count_photo = len(bufer_photo[tg_id])
    print(count_photo)
    # if count_photo == 1:
    #     bot.send_photo(-1001475019288, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb'), bufer_text[tg_id][0])
    #     bot.send_message(-1001475019288, '''–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±—É–∫–µ—Ç, –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º''', reply_markup = keyBoard_post)
    # elif count_photo == 2:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2)]
    #         bot.send_media_group(-1001475019288, files)
    #         bot.send_message(-1001475019288, '''–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±—É–∫–µ—Ç, –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º''', reply_markup = keyBoard_post)
    # elif count_photo == 3:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][2]}', 'rb') as f3:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2), InputMediaPhoto(f3)]
    #         bot.send_media_group(-1001475019288, files)
    #         bot.send_message(-1001475019288, '''–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±—É–∫–µ—Ç, –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º''', reply_markup = keyBoard_post)
    # elif count_photo == 4:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][2]}', 'rb') as f3, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][3]}', 'rb') as f4:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2),\
    #                  InputMediaPhoto(f3), InputMediaPhoto(f4)]
    #         bot.send_media_group(-1001475019288, files)
    #         bot.send_message(-1001475019288, '''–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±—É–∫–µ—Ç, –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º''', reply_markup = keyBoard_post)
    # elif count_photo == 5:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][2]}', 'rb') as f3, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][3]}', 'rb') as f4,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][4]}', 'rb') as f5:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2),\
    #                  InputMediaPhoto(f3), InputMediaPhoto(f4), InputMediaPhoto(f5)]
    #         bot.send_media_group(-1001475019288, files)
    #         bot.send_message(-1001475019288, '''–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±—É–∫–µ—Ç, –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º''', reply_markup = keyBoard_post)
    # elif count_photo == 6:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][2]}', 'rb') as f3, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][3]}', 'rb') as f4,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][4]}', 'rb') as f5, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][5]}', 'rb') as f6:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2),\
    #                  InputMediaPhoto(f3), InputMediaPhoto(f4), InputMediaPhoto(f5),\
    #                  InputMediaPhoto(f6)]
    #         bot.send_media_group(-1001475019288, files)
    #         bot.send_message(-1001475019288, '''–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±—É–∫–µ—Ç, –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º''', reply_markup = keyBoard_post)
    # elif count_photo == 7:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][2]}', 'rb') as f3, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][3]}', 'rb') as f4,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][4]}', 'rb') as f5, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][5]}', 'rb') as f6,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][6]}', 'rb') as f7:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2),\
    #                  InputMediaPhoto(f3), InputMediaPhoto(f4), InputMediaPhoto(f5),\
    #                  InputMediaPhoto(f6), InputMediaPhoto(f7)]
    #         bot.send_media_group(-1001475019288, files)
    #         bot.send_message(-1001475019288, '''–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±—É–∫–µ—Ç, –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º''', reply_markup = keyBoard_post)
    # elif count_photo == 8:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][2]}', 'rb') as f3, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][3]}', 'rb') as f4,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][4]}', 'rb') as f5, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][5]}', 'rb') as f6,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][6]}', 'rb') as f7, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][7]}', 'rb') as f8:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2),\
    #                  InputMediaPhoto(f3), InputMediaPhoto(f4), InputMediaPhoto(f5),\
    #                  InputMediaPhoto(f6), InputMediaPhoto(f7), InputMediaPhoto(f8)]
    #         bot.send_media_group(-1001475019288, files)
    #         bot.send_message(-1001475019288, '''–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±—É–∫–µ—Ç, –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º''', reply_markup = keyBoard_post)
    # elif count_photo == 9:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][2]}', 'rb') as f3, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][3]}', 'rb') as f4,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][4]}', 'rb') as f5, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][5]}', 'rb') as f6,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][6]}', 'rb') as f7, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][7]}', 'rb') as f8,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][8]}', 'rb') as f9:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2),\
    #                  InputMediaPhoto(f3), InputMediaPhoto(f4), InputMediaPhoto(f5),\
    #                  InputMediaPhoto(f6), InputMediaPhoto(f7), InputMediaPhoto(f8),\
    #                  InputMediaPhoto(f9)]
    #         bot.send_media_group(-1001475019288, files)
    #         bot.send_message(-1001475019288, '''–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±—É–∫–µ—Ç, –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º''', reply_markup = keyBoard_post)
    # elif count_photo == 10:
    #     with open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][0]}', 'rb') as f1, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][1]}', 'rb') as f2,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][2]}', 'rb') as f3, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][3]}', 'rb') as f4,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][4]}', 'rb') as f5, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][5]}', 'rb') as f6,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][6]}', 'rb') as f7, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][7]}', 'rb') as f8,\
    #     open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][8]}', 'rb') as f7, open(f'photos_{message.from_user.id}/{bufer_photo[tg_id][9]}', 'rb') as f10:
    #         files = [InputMediaPhoto(f1, caption = f'{bufer_text[tg_id][0]}'),InputMediaPhoto(f2),\
    #                  InputMediaPhoto(f3), InputMediaPhoto(f4), InputMediaPhoto(f5),\
    #                  InputMediaPhoto(f6), InputMediaPhoto(f7), InputMediaPhoto(f8),\
    #                  InputMediaPhoto(f9), InputMediaPhoto(f10)]
    #         bot.send_media_group(-1001475019288, files)
    #         bot.send_message(-1001475019288, '''–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±—É–∫–µ—Ç, –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º''', reply_markup = keyBoard_post)
    message_id = bot.send_message(-1001475019288, '''–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±—É–∫–µ—Ç, –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º''', reply_markup = keyBoard_post).message_id
    for administrator in admin:
        message_admin = bot.send_message(administrator, '''–ï—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—à–µ –ø—Ä–æ–¥–∞–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É''', reply_markup = keyBoard_sale).message_id

    with open('DB/bouquets.pickle', 'rb') as f:
        bouquets = pickle.load(f)
    
    bouquets[num_post].append(message_id)
    bouquets[num_post].append(message_admin)
    with open('DB/bouquets.pickle', 'wb') as f:
        pickle.dump(bouquets,f)
    print(bouquets)


    shutil.rmtree(f'photos_{message.from_user.id}/')
    bufer_photo.pop(tg_id)
    bufer_text.pop(tg_id)
    bufer_sum.pop(tg_id)
    bufer_name.pop(tg_id)

def append_sum(message):
    tg_id = message.from_user.id
    try:
        user_text = int(message.text)
        bufer_sum[tg_id] = []
        bufer_sum[tg_id].append(user_text)
        print(bufer_sum)
        bot.reply_to(message, f'–í—ã –≤–≤–µ–ª–∏ —Å—É–º–º—É —Ä–∞–≤–Ω—É—é {bufer_sum[tg_id][0]}. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞')
        bot.register_next_step_handler(message,append_name)
    except Exception as e:
        print(e)
        error = bot.send_message(message.from_user.id, '[ERROR]: –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(error, append_sum)

def append_name(message):
    tg_id = message.from_user.id
    try:
        name_of_bouquets = message.text
        bufer_name[tg_id] = []
        bufer_name[tg_id].append(name_of_bouquets)
        print(bufer_name)
        bot.reply_to(message, f'–ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–æ', reply_markup = keyBoard_next_step)
    except Exception as e:
        print(e)
        error = bot.send_message(message.from_user.id, '[ERROR]: –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(error, append_name)

#–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
def append_text_accept(message):
    tg_id = message.from_user.id
    try:
        user_text = message.text
        bufer_text[tg_id] = []
        bufer_text[tg_id].append(user_text)
        print(bufer_text)
        bot.reply_to(message, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –≤ –ø–æ—Å—Ç', 
                    reply_markup = keyBoard_verify)
    except Exception as e:
        print(e)
        error = bot.send_message(message.from_user.id, '[ERROR]: –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(error, append_text_accept)  

@bot.message_handler(content_types = ['photo'])
def append_photo_accept(message):
    tg_id = message.from_user.id
    try:
        if len(bufer_photo[tg_id]) == 10:
            bot.send_message(message.from_user.id, '''!!!–õ–∏–º–∏—Ç —Ñ–æ—Ç–æ –ø—Ä–µ–≤—ã—à–µ–Ω!!!
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞—Ä—É''', reply_markup = keyBoard_finish_add)
        else:
            file_info = bot.get_file(message.photo[len(message.photo)-1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            src = f'photos_{message.from_user.id}/' + file_info.file_path.split('/')[-1]
            with open(src, 'wb') as new_file:
               new_file.write(downloaded_file)

            bufer_photo[tg_id].append(file_info.file_path.split('/')[-1])
            print(bufer_photo)
            bot.reply_to(message, f'''–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∫ –ø–æ—Å—Ç—É –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ–≥–æ.
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ –ø–æ—Å—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 10 —à—Ç—É–∫.
–°–µ–π—á–∞—Å {len(bufer_photo[tg_id])}''',
                        reply_markup = keyBoard_finish_add)
    except Exception as e:
        print(e)
        error = bot.send_message(message.from_user.id, '[ERROR]: –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(error, append_photo_accept) 
#–£–∫–∞–∑–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
def delivery(message):
    tg_id = message.from_user.id

    with open('DB/buyer.pickle', 'rb') as f:
        buyer = pickle.load(f)
    address = message.text
    buyer[tg_id].append(address)
    with open('DB/buyer.pickle', 'wb') as f:
        pickle.dump(buyer,f)
    bot.send_message(message.from_user.id, '''–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑—è—Ç—å—Å—è —Å –≤–∞–º–∏üì±
–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ "+79151343030"''')
    bot.register_next_step_handler(message, append_phone)

def append_phone(message):
    try:
        with open('DB/buyer.pickle', 'rb') as f:
            buyer = pickle.load(f)
        if message.text == "/start":
            bot.send_message(message.from_user.id, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç –∑–∞–Ω–æ–≤–æ –≤ @florico")
        else:
            phone = int(message.text)
            buyer[message.from_user.id].append(phone)
            with open('DB/buyer.pickle', 'wb') as f:
                pickle.dump(buyer,f)
            confirmation(message.from_user.id)
    except Exception as e:
        error = bot.send_message(message.from_user.id, '[ERROR]: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≤—ã—Ö–æ–¥–∞')
        bot.register_next_step_handler(error, append_phone)
#–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
def confirmation(tg_id):
    with open('DB/buyer.pickle', 'rb') as f:
        buyer = pickle.load(f)
    with open('DB/bouquets.pickle', 'rb') as f:
        bouquets = pickle.load(f)
    print(buyer)
    bot.send_message(tg_id, f'''–í–∞—à –∑–∞–∫–∞–∑, "{bouquets[buyer[tg_id][0]][1]}", —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {bouquets[buyer[tg_id][0]][0]}—Ä—É–±.
–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {buyer[tg_id][1]}
–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {buyer[tg_id][2]}
–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{buyer[tg_id][3]}''', reply_markup = keyBoard_pay)

#–û–ø–ª–∞—Ç–∞ –±—É–∫–µ—Ç–∞
def buy_flower(tg_id):
    with open('DB/buyer.pickle', 'rb') as f:
        buyer = pickle.load(f)
    with open('DB/bouquets.pickle', 'rb') as f:
        bouquets = pickle.load(f)

    bot.send_invoice(
                    chat_id = tg_id,
                    need_name = True,
                    need_phone_number = True,
                    title = f'–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞!!!',
                    description = f'''–í–∞—à –∑–∞–∫–∞–∑, "{bouquets[buyer[tg_id][0]][1]}", —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {bouquets[buyer[tg_id][0]][0]}—Ä—É–±.
–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {buyer[tg_id][1]}
–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {buyer[tg_id][2]}''',
                    invoice_payload = 'true',
                    provider_token = '390540012:LIVE:12147',
                    start_parameter = 'true',
                    currency = 'RUB',
                    prices = [LabeledPrice(label=f'"{bouquets[buyer[tg_id][0]][1]}"', amount = int(f'''{bouquets[buyer[tg_id][0]][0]}00'''))]
                    )

@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    # print(message)
    tg_id = message.from_user.id
    bot.send_message(tg_id,'''–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –¥–æ—à–µ–ª, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!
–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä. –¢–∞–∫–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ –ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: @floricom''', reply_markup = None)

@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(query):
    tg_id = query.from_user.id
    with open('DB/buyer.pickle', 'rb') as f:
        buyer = pickle.load(f)
    with open('DB/bouquets.pickle', 'rb') as f:
        bouquets = pickle.load(f)
    print(query)
    bot.answer_pre_checkout_query(query.id, ok=True)  
    #–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
    for administrator in admin:
        bot.send_message(administrator, f'''–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.order_info.name} (@{query.from_user.username}) –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑ "{bouquets[buyer[tg_id][0]][1]}"
–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {buyer[tg_id][1]}
–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {buyer[tg_id][2]}
–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
—Ç–µ–ª–µ—Ñ–æ–Ω - {query.order_info.phone_number}''')
    buyer.pop(tg_id)


# @app.route(f'{WEBHOOK_URL_PATH}', methods=['POST'])
# def getMessage():
#         bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
#         return "ok", 200
@bot.callback_query_handler(func=lambda call: True)
def sale(call):
    with open('DB/bouquets.pickle', 'rb') as f:
        bouquets = pickle.load(f)

    keyBoard_post_sale = telebot.types.InlineKeyboardMarkup(True)
    key_feedback = telebot.types.InlineKeyboardButton(text='–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', url = 'https://t.me/floricom')
    key_catalog = telebot.types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url = 'https://florico.ru/')

    keyBoard_post_sale.add(key_feedback, key_catalog)

    if call.data.split('_')[0] == 'sale':
        print(call.data)
        bot.edit_message_text(chat_id = -1001475019288, message_id = bouquets[call.data.split('_')[1]][2], text='–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º', reply_markup = keyBoard_post_sale)
        bot.edit_message_text(chat_id = call.from_user.id, message_id = bouquets[call.data.split('_')[1]][3], text='–í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–Ω—ã!', reply_markup = None)



@bot.message_handler(commands = ['start'])
def start(message):
    tg_id = message.from_user.id
    
    with open('DB/admin.pickle', 'rb') as f:
        admin = pickle.load(f)
    with open('DB/buyer.pickle', 'rb') as f:
        buyer = pickle.load(f)
    with open('DB/bouquets.pickle', 'rb') as f:
        bouquets = pickle.load(f)
    
    print(message.from_user.id)
    if message.from_user.id in admin:
        bot.send_message(message.from_user.id,'''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!
–í –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.''',
        reply_markup = keyBoard_admin)
    elif message.text.split('/start ')[-1] in bouquets:
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏', reply_markup = keyBoard_delivery)
        buyer[tg_id] = []
        buyer[tg_id].append(message.text.split('/start ')[-1])
    else:
        bot.send_message(message.from_user.id, '–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –±—É–∫–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å –±—É–∫–µ—Ç –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ @florico')

    with open('DB/buyer.pickle', 'wb') as f:
        pickle.dump(buyer,f)


@bot.message_handler(content_types = ['text'])
def get_text(message):
    global bufer_text
    global bufer_photo
    global bufer_sum
    global bufer_name

    tg_id = message.from_user.id

    with open('DB/buyer.pickle', 'rb') as f:
        buyer = pickle.load(f)

    if message.text == '–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç':
        os.mkdir(f'photos_{message.from_user.id}/')
        bufer_photo[tg_id] = []
        append_photo = bot.send_message(message.from_user.id, '''–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞''', reply_markup = None)
    elif message.text == '–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ':
        append_text = bot.send_message(message.from_user.id, '''–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –ø–æ—Å—Ç–µ''', reply_markup = None)
        bot.register_next_step_handler(append_text, append_text_accept)
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç':
        bufer_text.pop(tg_id)
        bot.send_message(message.from_user.id, '''–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ''', reply_markup = None)
        bot.register_next_step_handler(message, append_text_accept)
    elif message.text == '–¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ':
        bot.send_message(message.from_user.id, '''–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±—É–∫–µ—Ç–∞''')
        bot.register_next_step_handler(message,append_sum) 
    elif message.text == '–ü–æ—Å–º–æ—Ç–µ—Ç—å –ø–æ—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π':
        bot.send_message(message.from_user.id, '''–í–∞—à, –ø–æ—Å—Ç –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–∏—Ç—å —Ç–∞–∫.
–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ—Å—Ç"''')
        view_post(message)
    elif message.text == '–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ—Å—Ç':
        bot.send_message(message.from_user.id, '''–í–∞—à –ø–æ—Å—Ç —Ä–∞–∑–º–µ—â–µ–Ω!!!''', reply_markup = keyBoard_admin)
        send_post(message)
    elif message.text == '–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è':
        shutil.rmtree(f'photos_{message.from_user.id}/')
        bufer_photo.pop(tg_id)
        bufer_text.pop(tg_id)
        bufer_sum.pop(tg_id)
        bufer_name.pop(tg_id)
        os.mkdir(f'photos_{message.from_user.id}/')
        bufer_photo[tg_id] = []
        append_photo = bot.send_message(message.from_user.id, '''–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞''', reply_markup = None)
    elif message.text == '–°–∞–º–æ–≤—ã–≤–æ–∑üì¶':
        bot.send_message(message.from_user.id, '''–í—ã —Å–º–æ–∂—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –±—É–∫–µ—Ç –ø–æ –∞–¥—Ä–µ—Å—É:
–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ù–∏–∂–Ω—è—è, –¥.3Ô∏è‚É£ (–º. –ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è), —Ü–≤–µ—Ç–æ—á–Ω–∞—è –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è üå∫–§–ª–æ—Ä–∏–∫–æüå∫ 
–ù–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ–ª–µ—Ñ–æ–Ω–∞ +79151343030''', reply_markup = None)
        buyer[tg_id].append('–°–∞–º–æ–≤—ã–≤–æ–∑')
        buyer[tg_id].append('–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ù–∏–∂–Ω—è—è, –¥.3Ô∏è‚É£ (–º. –ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è), —Ü–≤–µ—Ç–æ—á–Ω–∞—è –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è üå∫–§–ª–æ—Ä–∏–∫–æüå∫')
        print(buyer)
        with open('DB/buyer.pickle', 'wb') as f:
            pickle.dump(buyer,f)
        bot.send_message(message.from_user.id, '''–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑—è—Ç—å—Å—è —Å –≤–∞–º–∏üì±
–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ "+79151343030"''')
        bot.register_next_step_handler(message, append_phone)
    elif message.text == '–î–æ—Å—Ç–∞–≤–∫–∞üöö':
        bot.send_message(message.from_user.id, '''–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏!!!
üöö–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–æ—Å–∫–≤–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!''', reply_markup = None)
        buyer[tg_id].append('–î–æ—Å—Ç–∞–≤–∫–∞')
        bot.register_next_step_handler(message, delivery)
        with open('DB/buyer.pickle', 'wb') as f:
            pickle.dump(buyer,f)
    elif  message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å':
        buy_flower(message.from_user.id)
    elif  message.text == '–ò–∑–º–µ–Ω–∏—Ç—å':
        bot.send_message(message.from_user.id, '''–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏''', reply_markup = keyBoard_delivery)
        buyer.pop(message.from_user.id)


if __name__ == '__main__':
    # app.run(host='127.0.0.1',
    #     port=7771)
     bot.polling(none_stop = True, interval = 0)